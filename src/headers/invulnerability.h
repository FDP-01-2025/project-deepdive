#ifndef INVULNERABILITY_H
#define INVULNERABILITY_H

#include <iostream>
#include <ctime>
#include <cstdlib>
#include "position.h"
#include "submarine.h"
// Forward declaration of Submarine class
static bool invulnerableItemVisible = false;
static int posXInvulnerableItem = 0;
static int posYInvulnerableItem = 0;
static clock_t lastInvulnerableItemTime;
// Interval for the invulnerability item to respawn
static const int invulnerableRespawnInterval = 50000; // every 50 seconds
static clock_t lastInvulnerableRespawnTime;

static bool invulnerabilityActive = false;
static clock_t invulnerabilityStartTime = 0;
static const int invulnerabilityDuration = 10000; // 10 seconds

// Generates a new random position for the item
static void generateRandomInvulnerablePosition()
{
    posXInvulnerableItem = rand() % 60 + 40;
    posYInvulnerableItem = rand() % 18 + 3;
}

// Displays the item on the screen
static void showInvulnerableItem()
{
    if (invulnerableItemVisible)
    {
        gotoxy(posXInvulnerableItem, posYInvulnerableItem);
        std::cout << "#";
    }
}

// Hides the invulnerability item
static void hideInvulnerableItem()
{
    gotoxy(posXInvulnerableItem, posYInvulnerableItem);
    std::cout << " ";
    invulnerableItemVisible = false;
    lastInvulnerableRespawnTime = clock();
}

// Detects collision between submarine and item
static bool detectInvulnerableItemCollision(const Submarine &sub)
{
    if (!invulnerableItemVisible)
        return false;

    int subX = sub.x;
    int subY = sub.y;
    const int subW = 13;
    const int subH = 3;

    return (subX <= posXInvulnerableItem && posXInvulnerableItem < subX + subW &&
            subY <= posYInvulnerableItem && posYInvulnerableItem < subY + subH);
}

// Checks if the item should respawn
static void checkInvulnerableItemRespawn()
{
    clock_t now = clock();
    if (!invulnerableItemVisible && !invulnerabilityActive && now - lastInvulnerableRespawnTime >= invulnerableRespawnInterval)
    {
        generateRandomInvulnerablePosition();
        invulnerableItemVisible = true;
    }
}

// Resets the item at level start
static void resetInvulnerableItem()
{
    lastInvulnerableRespawnTime = clock();
    invulnerableItemVisible = false;
    invulnerabilityActive = false;
}

// Activates invulnerability
static void activateInvulnerability()
{
    invulnerabilityActive = true;
    invulnerabilityStartTime = clock();

    // Show message

    gotoxy(50, 0); // Adjust position according to your console
    std::cout << ">>> INVULNERABILITY ACTIVATED (10s) <<<";

}

// Updates the power state and countdown
static void updateInvulnerability()
{
    if (invulnerabilityActive)
    {
        clock_t now = clock();
        int remaining = invulnerabilityDuration - (now - invulnerabilityStartTime);

        if (remaining <= 0)
        {
            invulnerabilityActive = false;

            // Clear message
            gotoxy(5, 29);
            for (int i = 0; i < 80; i++)
            {
                std::cout << " ";
            }
        }
        else
        {
            // Show countdown
            gotoxy(60, 29);
            std::cout << "Invulnerable time: " << (remaining / 1000) << "s ";
        }
    }
}

#endif