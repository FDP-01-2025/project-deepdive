#ifndef INVULNERABILITY_H
#define INVULNERABILITY_H

#include <iostream>
#include <ctime>
#include <cstdlib>
#include "position.h"
#include "submarine.h"


static bool itemInvulnerableVisible = false;
static int posXItemInvulnerable = 0;
static int posYItemInvulnerable = 0;
static clock_t tiempoUltimoItemInvulnerable;

static const int intervaloReaparicionInvulnerable = 25000; // cada 25 segundos
static clock_t tiempoUltimaReaparicionInvulnerable;

// --- Mueve aquí las variables de invulnerabilidad ---
static bool invulnerableActiva = false;
static clock_t tiempoInicioInvulnerable = 0;
static const int duracionInvulnerabilidad = 10000; // 10 segundos

// Genera una nueva posición aleatoria para el ítem
static void generarPosicionAleatoriaInvulnerable()
{
    posXItemInvulnerable = rand() % 60 + 40;
    posYItemInvulnerable = rand() % 18 + 3;
}

// Muestra el ítem en pantalla
static void mostrarItemInvulnerable()
{
    if (itemInvulnerableVisible)
    {
        gotoxy(posXItemInvulnerable, posYItemInvulnerable);
        std::cout << "#";
    }
}

// Oculta el ítem de invulnerabilidad
static void ocultarItemInvulnerable()
{
    gotoxy(posXItemInvulnerable, posYItemInvulnerable);
    std::cout << " ";
    itemInvulnerableVisible = false;
    tiempoUltimaReaparicionInvulnerable = clock();
}

// Detecta colisión entre submarino e ítem
static bool detectarColisionItemInvulnerable(const Submarine& sub)
{
    if (!itemInvulnerableVisible)
        return false;

    int subX = sub.x;
    int subY = sub.y;
    const int subW = 13;
    const int subH = 3;

    return (subX <= posXItemInvulnerable && posXItemInvulnerable < subX + subW &&
            subY <= posYItemInvulnerable && posYItemInvulnerable < subY + subH);
}

// Revisa si ya debe reaparecer el ítem
static void verificarReaparicionItemInvulnerable()
{
    clock_t ahora = clock();
    if (!itemInvulnerableVisible && !invulnerableActiva && ahora - tiempoUltimaReaparicionInvulnerable >= intervaloReaparicionInvulnerable)
    {
        generarPosicionAleatoriaInvulnerable();
        itemInvulnerableVisible = true;
    }
}

// Reinicia el ítem al iniciar nivel
static void reiniciarItemInvulnerable()
{
    tiempoUltimaReaparicionInvulnerable = clock();
    itemInvulnerableVisible = false;
    invulnerableActiva = false;
}

// Activa la invulnerabilidad
static void activarInvulnerabilidad()
{
    invulnerableActiva = true;
    tiempoInicioInvulnerable = clock();

    // Mostrar mensaje
    gotoxy(50, 0); // Puedes mover esta posición si molesta
    std::cout << ">>> INVULNERABILIDAD ACTIVADA (10s) <<<";
}

// Actualiza el estado del poder y cuenta regresiva
static void actualizarInvulnerabilidad()
{
    if (invulnerableActiva)
    {
        clock_t ahora = clock();
        int restante = duracionInvulnerabilidad - (ahora - tiempoInicioInvulnerable);

        if (restante <= 0)
        {
            invulnerableActiva = false;

            // Limpiar mensaje
            gotoxy(5, 1);
            std::cout << "                                  ";
        }
        else
        {
            // Mostrar cuenta regresiva
            gotoxy(40, 1);
            std::cout << "Tiempo invulnerable: " << (restante / 1000) << "s ";
        }
    }
}

#endif